SELECT getLanguageName(r.name, r.name_fr, r.name_en, r.name_de, r.name_es, r.name_ru, r.name_zh) AS name,
    city_class(r.type) AS class,
    r.type AS type,
    ST_X(ST_PointOnSurface(ST_Transform(r.geometry, 4326))) AS lon,
    ST_Y(ST_PointOnSurface(ST_Transform(r.geometry, 4326))) AS lat,
    r.rank_search AS place_rank,
    getImportance(r.rank_search, r.wikipedia, r.calculated_country_code) AS importance,
    '' AS street,
    constructSpecificParentName(r.id, r.rank_search, 16) AS city,
    constructSpecificParentName(r.id, r.rank_search, 12) AS county,
    constructSpecificParentName(r.id, r.rank_search, 8) AS state,
    countryName(r.partition) AS country,
    r.calculated_country_code AS country_code,
    constructDisplayName(r.id, ',') AS display_name,  
    ST_XMIN(ST_Transform(r.geometry, 4326)) AS west,
    ST_YMIN(ST_Transform(r.geometry, 4326)) AS south,
    ST_XMAX(ST_Transform(r.geometry, 4326)) AS east,
    ST_YMAX(ST_Transform(r.geometry, 4326)) AS north,
    getWikipediaURL(r.wikipedia, r.calculated_country_code) AS wikipedia
FROM osm_polygon AS r 
UNION (SELECT getLanguageName(rr.name, rr.name_fr, rr.name_en, rr.name_de, rr.name_es, rr.name_ru, rr.name_zh) AS name,
    city_class(rr.type) AS class,
    rr.type AS type,
    ST_X(ST_Transform(rr.geometry, 4326)) AS lon,
    ST_Y(ST_Transform(rr.geometry, 4326)) AS lat,
    rr.rank_search AS place_rank,
    getImportance(rr.rank_search, rr.wikipedia, rr.calculated_country_code) AS importance,
        '' AS street,
    constructSpecificParentName(rr.parent_id, rr.rank_search, 16) AS city,
    constructSpecificParentName(rr.parent_id, rr.rank_search, 12)  AS county,
    constructSpecificParentName(rr.parent_id, rr.rank_search, 8)  AS state,
    countryName(rr.partition) AS country,
    rr.calculated_country_code AS country_code,
    constructNodeDisplayName(rr.parent_id, ',',COALESCE(NULLIF(rr.name_en,''), rr.name)) AS display_name,  
    ST_XMIN(ST_Transform(rr.geometry, 4326)) AS west,
    ST_YMIN(ST_Transform(rr.geometry, 4326)) AS south,
    ST_XMAX(ST_Transform(rr.geometry, 4326)) AS east,
    ST_YMAX(ST_Transform(rr.geometry, 4326)) AS north,
    getWikipediaURL(rr.wikipedia, rr.calculated_country_code) AS wikipedia
FROM osm_point AS rr WHERE       rr.linked IS FALSE)
UNION SELECT getLanguageName(rrr.name, rrr.name_fr, rrr.name_en, rrr.name_de, rrr.name_es, rrr.name_ru, rrr.name_zh) AS name,
    road_class(rrr.type) AS class,
    rrr.type,
    ST_X(ST_LineInterpolatePoint(ST_Transform(rrr.geometry, 4326), 0.5)) AS lon,
    ST_Y(ST_LineInterpolatePoint(ST_Transform(rrr.geometry, 4326), 0.5)) AS lat,
    rrr.rank_search AS place_rank,
    getImportance(rrr.rank_search, rrr.wikipedia, rrr.calculated_country_code) AS importance,
    rrr.name AS street,
    constructSpecificParentName(rrr.parent_id, rrr.rank_search, 16) AS city,
    constructSpecificParentName(rrr.parent_id, rrr.rank_search, 12)  AS county,
    constructSpecificParentName(rrr.parent_id, rrr.rank_search, 8)  AS state,
    countryName(rrr.partition) AS country,
    rrr.calculated_country_code AS country_code,
    constructNodeDisplayName(rrr.parent_id, ',',COALESCE(NULLIF(rrr.name_en,''), rrr.name)) AS display_name,  
    ST_XMIN(ST_Transform(rrr.geometry, 4326)) AS west,
    ST_YMIN(ST_Transform(rrr.geometry, 4326)) AS south,
    ST_XMAX(ST_Transform(rrr.geometry, 4326)) AS east,
    ST_YMAX(ST_Transform(rrr.geometry, 4326)) AS north,
    getWikipediaURL(rrr.wikipedia, rrr.calculated_country_code) AS wikipedia
FROM osm_linestring AS rrr  WHERE merged IS FALSE
UNION SELECT getLanguageName(rrrr.name, rrrr.name_fr, rrrr.name_en, rrrr.name_de, rrrr.name_es, rrrr.name_ru, rrrr.name_zh) AS name,
    road_class(rrrr.type) AS class,
    rrrr.type,
    ST_X(ST_PointOnSurface(ST_Transform(rrrr.geometry, 4326))) AS lon,
    ST_Y(ST_PointOnSurface(ST_Transform(rrrr.geometry, 4326))) AS lat,
    rrrr.rank_search AS place_rank,
    getImportance(rrrr.rank_search, rrrr.wikipedia, rrrr.calculated_country_code) AS importance,
    rrrr.name AS street,
    constructSpecificParentName(rrrr.parent_id, rrrr.rank_search, 16) AS city,
    constructSpecificParentName(rrrr.parent_id, rrrr.rank_search, 12)  AS county,
    constructSpecificParentName(rrrr.parent_id, rrrr.rank_search, 8)  AS state,
    countryName(rrrr.partition) AS country,
    rrrr.calculated_country_code AS country_code,
    constructNodeDisplayName(rrrr.parent_id, ',',COALESCE(NULLIF(rrrr.name_en,''), rrrr.name)) AS display_name,  
    ST_XMIN(ST_Transform(rrrr.geometry, 4326)) AS west,
    ST_YMIN(ST_Transform(rrrr.geometry, 4326)) AS south,
    ST_XMAX(ST_Transform(rrrr.geometry, 4326)) AS east,
    ST_YMAX(ST_Transform(rrrr.geometry, 4326)) AS north,
    getWikipediaURL(rrrr.wikipedia, rrrr.calculated_country_code) AS wikipedia
FROM osm_merged_multi_linestring AS rrrr  
;